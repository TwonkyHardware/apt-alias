#!/bin/bash

logFile=/home/$SUDO_USER/.apt.log
orig=apt-get

# Prep the log file.  If it doesn't exist, create it.
# `!`: "not"
# `-s`: File exists and has nonzero size
if [ ! -s $logFile ]; then
		# Create the file as the invoking user.
		# The `logname` command returns the name of the logged in user, regardless
		# of whether that user has issued a command while acting as root.
		sudo -u $(logname) touch $logFile
		printf "# This is the package installation log generated by ~/bin/apt-get-log or ~/bin/apt-log, aliased to `apt-get` and `apt`, respectively,  in ~/.bash_aliases\n\n" >> $logFile
fi

# Scan through positional arguments.
# 1) See if an install/remove/purge command is present.
# 2) If so, identify all arguments after it as package names and log the command.
# 3) If not, run the command as normal.

# Use index $i to track positional parameter index.
# Ignore $0, the script name, and start at $1.
i=1

# Declare $packages as an empty indexed array.  Its elements will be the package(s)
# installed with this command.  Currently unused.
# TODO: Use $packages to construct a separate log file to automate restoration
# of user-installed packages
##packages=()

# Boolean $cmd will indicate whether an install/remove/purge command has been
# found. 
# Integer $cmd_index will be its index.
cmd=false
cmd_index=0

# $@ expands to a list of all input parameters as separately quoted strings
# This does not include $0, the script name.
for arg in "$@"; do
		if [[ ("$arg" == "install") || ("$arg" == "remove") || ("$arg" == "purge") ]]; then
				cmd=true
				cmd_index=$i
		fi

		## Assume all remaining arguments are a space-separated list of packages
		##if [ "$cmd" = true ] && [ "$i" -gt "$cmd_index" ]; then
		##		packages+=$arg
		##fi

		# Increment the index of the current parameter
		i=$((i+1))
done

# If "install", "remove", or "purge" are absent, don't do anything to the command
if ! [ "$cmd" = true ]; then
		sudo /usr/bin/"$orig" "$@"
else
		# If we're installing or uninstalling something, log it:
		echo "Invoking alternate script ~/bin/$orig-log"
		echo "Logging '$orig' activity to $logFile"
		sudo /usr/bin/"$orig" "$@"
		# Capture the exit status of the install/remove/purge command
		exitStatus=$?
		if [ $exitStatus == 0 ]; then
				printf "%s\t%s\t%s\t successful\n" "$(date)" "$orig" "$*" >> $logFile
		else
				printf "%s\t%s\t%s\t unsuccessful\n" "$(date)" "$orig" "$*" >> $logFile
		fi
fi
